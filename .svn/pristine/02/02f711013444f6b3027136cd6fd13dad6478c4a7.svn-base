<template>
    <div class="selCommon redPackets">
        <!-- <ul>
            <li v-for="(item,index) in nav" class="shelve" :class="{'active':currentIndex==index}" :key="index"
                @click="select(index)">{{item}}
            </li>
            <li style="display: inline-block">
                <el-button @click="add" type="primary">添加红包活动</el-button>
            </li>
        </ul> -->

         <el-form :inline="true" :model="formInline" class="demo-form-inline form_search" label-width="80px">
          <el-form-item label="活动时间：" class="form_item_mt10">
                <el-date-picker
                    v-model="date"
                    type="daterange"
                    @change="dateChange"
                    placeholder="选择日期">
                </el-date-picker>
            </el-form-item>
            <el-form-item label="活动名称：" class="form_item_mt10 form_item_wh280">
                <el-input v-model="formInline.name" placeholder="" style="width: 200px;"  v-on:keyup.enter.native="search"></el-input>
            </el-form-item>
            <el-form-item label="活动状态：" class="form_item_mt10 form_item_wh280">
                <el-select v-model="formInline.status"  class="form_ipt_200" @change="search">
                    <el-option v-for="item in nav" :key="item.value" :label="item.name" :value="item.value"></el-option>
                </el-select>
            </el-form-item>
            <el-form-item label=" " class="form_item_mt10 form_item_wh280">
                <el-button type="primary" @click="search" class="searchBtn">查询</el-button>
                <el-button @click="add" type="primary">添加红包活动</el-button>
            </el-form-item>
        </el-form>
        <!-- 信息表 -->
        <el-table :data="tableData" border style="width: 100%;margin-top:15px;margin-bottom:10px;min-height:400px" max-height="460">
            <el-table-column prop="code" label="活动编号" min-width="80" align="center"></el-table-column>
            <el-table-column prop="name" label="活动名称" min-width="80"></el-table-column>
            <el-table-column prop="amounts" label="红包金额" min-width="100">
                <template scope="scope">
                    <span v-if="scope.row.amounts">
                        固定金额：{{scope.row.amounts}}
                    </span>
                    <span v-else>
                        随机：{{scope.row.minAmounts}} - {{scope.row.maxAmounts}}
                    </span>
                </template>
            </el-table-column>
            <el-table-column prop="limitTotals" label="红包总数" width="80" ></el-table-column>
            <el-table-column prop="limitAmounts" label="红包门槛" width="80"></el-table-column>
            <el-table-column prop="remainTimes" label="库存" mwidth="80"></el-table-column>
            <el-table-column prop="SourcWayeCode" label="有效时间" min-width="150" align="center">
                <template scope="scope">
                    <span v-if="scope.row.startTime">
                        开始时间：{{scope.row.startTime}}<br/>
                        结束时间：{{scope.row.endTime}}
                    </span>
                </template>
            </el-table-column>
            <!-- <el-table-column prop="catalogType" label="适用栏目" min-width="100">
                <template scope="scope">
                    <span v-if="scope.row.catalogType == 1">医美</span>
                    <span v-if="scope.row.catalogType == 2">商城</span>
                </template>
            </el-table-column> -->
            <el-table-column prop="IsAllGoods" label="适用商品" min-width="100" align="center">
                <template scope="scope">
                    <span v-if="!scope.row.targetGoodsCodes">全部商品</span>
                    <span v-else>部分商品</span>
                </template>
            </el-table-column>
            <el-table-column prop="limitUsers" label="领取人/次" min-width="100"></el-table-column>
            <el-table-column prop="usedTimes" label="已使用" min-width="100"></el-table-column>
            <el-table-column prop="status" label="活动状态" min-width="100" align="center">
                <template scope="scope">
                    <el-tag type="warning" v-if="scope.row.status == 1">未开始</el-tag>
                    <el-tag type="success" v-if="scope.row.status == 2">进行中</el-tag>
                    <el-tag type="gray" v-if="scope.row.status == 3">已结束</el-tag>
                    <el-tag type="gray" v-if="scope.row.status == 4">已关闭</el-tag>
                </template>
            </el-table-column>
            <el-table-column prop="grade" label="操作" min-width="150" >
                <template scope="scope">
                    <el-button @click="edit(scope.$index,tableData)" type="primary" size="small">编辑
                    </el-button>
                    <el-button @click="close(scope.row,4)" type="primary" size="small" :disabled="scope.row.status == 3||scope.row.status == 4" >关闭</el-button>
                    <el-button @click="deleteRow(scope.$index,tableData)" type="primary" size="small" >删除</el-button>
                </template>
            </el-table-column>
        </el-table>
        <!-- 信息表 -->
        <!-- 分页 -->
        <div class="block">
            <el-pagination
                @size-change="handleSizeChange"
                @current-change="handleCurrentChange"
                :current-page="currentPage"
                :page-sizes="[10, 20, 30, 40]"
                :page-size="size"
                layout="total, sizes, prev, pager, next, jumper"
                :total="total">
            </el-pagination>
        </div>
        <el-dialog title="添加" :visible.sync="dialogFormVisible" size=''>
            <add style="width: 800px" @selectP="selectP" :selectProject="selectProject" @closeAdd="closeAdd" :currentId="currentId"
                 :ProjectId="ProjectId" v-if="dialogFormVisible" @openSelDialog='openSelDialog'></add>
        </el-dialog>
        <el-dialog :modal="true" title="" :visible.sync="dialogFormVisible1" size='' label-width="80px">
            <div class="goodList" style="width: 600px">
                <div style="min-height:200px;">
                    <el-tree style="min-height:200px;" :data="data2" show-checkbox :accordion="true" node-key="id" ref="tree" highlight-current
                         :props="defaultProps"
                         element-loading-text="拼命加载中"
                         v-loading.body="loading">
                    </el-tree>
                </div>
                <div style="line-height:36px;">数据较多，勾选大范围数据时有延时</div>
                <div class="footer_ope">
                    <el-button @click="getNode" type="primary">保存</el-button>
                    <el-button @click="cancelProject">取消</el-button>
                </div>
            </div>
        </el-dialog>
        <el-dialog :modal="true" title="编辑" :visible.sync="dialogFormVisibleT" size=''>
            <edit v-if="dialogFormVisibleT" style="width: 800px" :editMes="editMes" @selectP="selectP" 
                  :selectProject="selectProject" @closeAdd="closeAdd" :ProjectId="ProjectId" @openSelDialog='openSelDialog'></edit>
        </el-dialog>
        <el-dialog :modal="true" title="选择用户" :visible.sync="userDialog" size=''>
            <userSel v-if="userDialog" @userSelect="userSelect" :currentId="currentId" style="width:800px"></userSel>
        </el-dialog>
    </div>
</template>

<script type="text/ecmascript-6">
    import "@/style/selfCommon.less"
    import add from "./components/add.vue"
    import edit from "./components/editPacket.vue"
    import userSel from './components/userSel'
    import { getProjectCount, getProjectAll,GetRedpackets ,DeleteRedpacket,GetCatelogByColumnCode,GetGoodsByKeywords,CloseRedPacket,SetRedPacketStatus} from '@/api/myData'
    export default {
        // name: "redPackets",
        data () {
            return {
                date:"",
                total: 0,
                size: 10,
                currentPage: 1,
                loading: true,
                userDialog:false,
                data1: [],
                data2: [],
                editMes: {},
                selectProject: [],
                defaultProps: {
                    children: 'children',
                    label: 'label'
                },
                formInline:{
                    startDate:'',
                    endDate:'',
                    name:"",
                    status:'',
                },
//                编辑项目
                editProject:[],
                ProjectId: [],
                projectList: [],
                classList: [],
                dialogFormVisibleT: false,
                dialogFormVisible1: false,
                dialogFormVisible: false,
                currentIndex: 0,
                nav: [{name:"全部",value:""}, {name:'未开始',value:'1'}, {name:'进行中',value:'2'}, {name:'已结束',value:"3"},{name:'已关闭',value:"4"}],
                tableData: [],
                currentId:"",//当前操作Id
            }
        },
        mounted(){
            this.search(0)
        },
        methods: {
            // 打开用户选择窗口
            openSelDialog(val,mes){
                this.userDialog = true
                // 设置选择的条件
            },
            // 用户选择确认,记录保存Id，用于红包添加id传值
            userSelect(id){
                if(id){
                    
                    this.currentId = id
                    this.editMes.targetUserRuleId = id
                }
                this.userDialog = false
            },
            dateChange(val){
                if(val){
                    this.formInline.startDate = val.substring(0,10)
                    this.formInline.endDate = val.substring(13)
                }else{
                    this.formInline.startDate = ""
                    this.formInline.endDate = ""
                }
            },
            async GetRedpackets(params){
                try {
                    let res = await GetRedpackets(params)
                    this.total = res.count
                    this.tableData = res.data
                } catch (err) {
                    console.log(err)
                }
            },
            async DeleteRedpacket(params){
                try {
                    let res = await DeleteRedpacket(params)
                    if (res.status) {
                        this.$message({type: 'success', message: '删除成功!'})
                        this.search(this.currentIndex)
                    } else {
                        this.$message({type: 'error', message: '删除失败!'})
                    }
                } catch (err) {
                    console.log(err)
                    this.$message({type: 'error', message: '删除失败!'})
                }
            },
            async CloseRedPacket(params){
                try {
                    let res = await SetRedPacketStatus(params)
                    if (res.status) {
                        this.$message({type: 'success', message: '关闭成功!'})
                        this.search(this.currentIndex)
                    } else {
                        this.$message({type: 'error', message: '关闭失败!'})
                    }
                } catch (err) {
                    console.log(err)
                    this.$message({type: 'error', message: '关闭失败!'})
                }
            },
            
            close(data, status){
                this.$confirm('是否确定关闭该红包?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    this.CloseRedPacket({
                        id:data.id,
                        status:status
                    })
                })
            },
            edit(index, data){
                this.dialogFormVisibleT = true
                this.editMes = data[index]
                this.currentId = data[index].targetUserRuleId?data[index].targetUserRuleId:''
                this.selectProject = []
            },
            deleteRow(index, data){
                this.$confirm('是否确定删除该红包?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
                }).then(() => {
                    this.DeleteRedpacket({
                        id: data[index].id
                    })
                })
            },
            add(){
                this.currentId = ""
                this.dialogFormVisible = true
                this.selectProject = []
            },
            select(index){
                this.currentIndex = index
                this.search(index)
            },
            selectP(val){
                
                this.loading = true
                if(val.length>1){//编辑打开 tree
                    this.getData(val[0],val[1])
                }else{//添加打开 tree
                    this.getData(val)
                }
                this.dialogFormVisible1 = true
            },
            cancelProject(){
                this.currentId=""
                this.dialogFormVisible1 = false
            },
            search(){
               
                this.GetRedpackets({
                    pageIndex: this.currentPage,
                    pageSize: this.size,
                    QueryTime1:this.formInline.startDate,
                    QueryTime2:this.formInline.endDate,
                    Name:this.formInline.name,
                    Status:this.formInline.status,
                })
            },
            //            获取选中项目
            getNode(){
                let arr = []
                this.$refs.tree.getCheckedNodes().forEach(row=> {
                    if (row.CatalogPath) {
                        arr.push(row)
                    }
                })
                this.selectProject = arr
                
                // 获取选择的分类数据
                this.ProjectId = this.getParent(this.$refs.tree.getCheckedNodes())
                this.dialogFormVisible1 = false
            },
            getParent(data){
                
                var len = data.length
                let arr = []
                for (let i = 0; i < len; i++) {
                    for (let j = 0; j < len; j++) {
                        if (data[i].pid == data[j].id) {
                            break
                        } else {
                            if (j == len - 1) {
                                arr.push(data[i])
                            }
                        }
                    }
                }
                
                return arr
            },
            async getData(index,params) {
                if (index == 1) {
                    this.projectList = await getProjectAll()
                    let res = await GetCatelogByColumnCode({code: 100})//daxie
                    this.classList = res.data
                } else {
                    this.projectList = await getProjectAll({IsMall: 1})
                    let res = await GetCatelogByColumnCode({code: 101})//daxie
                    this.classList = res.data
                }
//                编辑传值params
                if(this.data1.length == this.projectList.length ){
                    
                }else{
                    this.data1 = this.dealData(this.projectList)
                    this.data2 = this.getDataTree(this.classList)
                }
                if(params){
                    this.selectProject = this.geteditMes(this.data1,params)
                }
                this.loading = false
                // 勾选已选中的项目
                if(params){
                    this.$refs.tree.setCheckedKeys([]);
                    setTimeout(()=>{
                        this.setCheckedKeys(params)
                    },100)
                }
            },
            getDataTree(data){
                let arr = [], arr2 = []
                data.forEach(row=> {
                    arr.push({id: row.code, label: row.name, pid: row.parentCode})
                })
                arr2 = this.getdata(this.data1.concat(arr), "")
                return arr2
            },
            dealData(data){
                data.forEach(row=> {
                    let lastCode = row.CatalogPath.split("|")
                    row.pid = lastCode[lastCode.length - 2]
                    row.label = row.Name
                    row.id = row.Code
                })
                return data
            },
            getdata(data, pid) {
                var result = [], temp;
                for (var i = 0; i < data.length; i++) {
                    if (data[i].pid == pid) {
//                        var obj = {"label": data[i].label, "id": data[i].id};
                        var obj = data[i]
                        temp = this.getdata(data, data[i].id);
                        if (temp.length > 0) {
                            obj.children = temp;
                        }
                        result.push(obj);
                    }
                }
                return result;
            },
            handleSizeChange(val) {
                console.log(`每页 ${val} 条`);
                this.size = val
                this.search()
            },
            handleCurrentChange(val) {
                console.log(`当前页: ${val}`);
                this.currentPage = val
                this.search()
            },
            closeAdd(val){
                if (val != 'cancel') {
                    this.search()
                }
                this.dialogFormVisible = false
                this.dialogFormVisibleT = false
            },
            geteditMes(data,params){

                let arr = []
                let len = params.length
                let len1 = data.length
                for(let i=0;i<len;i++){
                    for(let j=0;j<len1;j++){
                        if(params[i]==data[j].Code){
                            arr.push(data[j])
                            break;
                        }
                    }
                }
                return arr
            },
            setCheckedKeys(params) {
                this.$refs.tree.setCheckedKeys( params);
            },
        },
        components: {
            add,
            edit,
            userSel
        }
    }
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>

</style>
