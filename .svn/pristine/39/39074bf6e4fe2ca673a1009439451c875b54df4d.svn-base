<template>
   <div class="">
        <el-form :model="ruleForm" :rules="rules" ref="ruleForm" label-width="110px" class="">
                <el-form-item label="消费商：" prop="BranchCode" required class="form_item_mt10">
                    <el-autocomplete v-model="branch" :fetch-suggestions="queryCus" placeholder="请输入内容" :trigger-on-focus="false" 
                    custom-item="my-item-extraMember" @select="selectCus" style="width:250px;"></el-autocomplete>
                </el-form-item>

                <el-form-item label="支付方式：" prop="type" class="form_item_mt10" >
                    <el-select v-model="ruleForm.type" style="width: 250px" @change='paySelect'>
                        <el-option v-for="(item,index) in payWayList" :key="index" :label="item.name" :value="item.name+'|'+item.value"></el-option>
                    </el-select>
                </el-form-item>

                <el-form-item label="实际支付金额：" prop="RealAmount" class="form_item_mt10">
                    <el-input-number v-model="ruleForm.RealAmount" :debounce="debounce"  :controls="false"
                                     style="width: 250px"></el-input-number>
                </el-form-item>
                <el-form-item label="预付款余额：" class="form_item_mt10" v-if="ruleForm.PayType == '018'">
                    <span>{{RemainAmount}}</span>
                </el-form-item>
                <el-form-item label="手续费：" class="form_item_mt10">
                    <el-input-number v-model="ruleForm.ProcFee" :debounce='debounce'  :controls="false"
                                     style="width: 250px"></el-input-number>
                </el-form-item>
                <el-form-item label="收款时间：" class="form_item_mt10">
                    <el-date-picker type="date" placeholder="选择日期" v-model="payDate"
                                    style="width: 250px;"></el-date-picker>
                </el-form-item>
                <el-form-item label="销售公司：" prop="topBranch" class="form_item_mt10">
                    <el-select style="width:250px" v-model="ruleForm.topBranch" @change="selBranch" filterable placeholder="请选择">
                        <el-option v-for="(item,index) in topBranchList" :label="item.branchName" :value="item.branchName+'|'+item.code" :key="index"></el-option>
                    </el-select>
                </el-form-item>
                <!-- <el-form-item label="医院：" prop="topBranch" class="form_item_mt10" v-if="isHos">
                    <el-select style="width:250px" v-model="ruleForm.topBranch" @change="selBranch" filterable placeholder="请选择">
                        <el-option v-for="(item,index) in topBranchList" :label="item.supplierName" :value="item.supplierName+'|'+item.code" :key="index"></el-option>
                    </el-select>
                </el-form-item> -->
                <el-form-item label="收款账户：" prop="ReceiveAccount" class="form_item_mt10" v-if="ruleForm.PayType!='001'&&ruleForm.PayType!='018'">
                    <el-select style="width:250px" v-model="ruleForm.ReceiveAccount" filterable placeholder="请选择">
                        <el-option v-for="(item,index) in accountList" :label="item.shortName" :value="item.shortName" :key="index"></el-option>
                    </el-select>
                </el-form-item>
                
                <el-form-item label="备注：" class="form_item_mt10">
                    <el-input type="textarea" v-model="ruleForm.Memo" style="width: 250px"></el-input>
                </el-form-item>
                <el-form-item label="" class="form_item_mt10">
                    <el-button type="primary" @click="submitForm('ruleForm')">确定</el-button>
                    <el-button @click="resetForm('ruleForm')">取消</el-button>
                </el-form-item>
        </el-form>
   </div>
</template>

<script>
import { getCookie } from "@/config/mUtils";
import {getBaseDataByCode,GetDropDownPermission,GetBaseBranchAccount,AddBranchOrderPay,
GetHospitalAccountByCode,GetUserAccountByCode,GetBranchByKeywords} from "@/api/myData"
import Vue from "vue"
     Vue.component('my-item-extraMember', {
        functional: true,
        render: function(h, ctx) {
            var item = ctx.props.item;
            return h('li', ctx.data, [
                h('p', { attrs: { class: 'select_name'+item.Type, title: item.name } }, ['名字：' + item.name]),
                h('p', { attrs: { class: 'select_name'+item.Type, title: item.name} }, ['编号：' + item.code]),
                h('p', { attrs: { class: 'select_name'+item.Type, title: item.name} }, ['手机号：' + item.phone]),
            ]);
        },
        props: {
            item: { type: Object, required: true }
        }
    });
export default {

    data() {
        return {
            branch:"",
            debounce:1000,
            payWayList:[],
            accountList:[],
            hosAccount:[],//医院账户
            payDate:"",
            ruleForm: {
                BranchCode:"",
                PayDate:"",
                type: "",
                PayTypeName:"",
                PayType:"",
                Memo: "",
                RealAmount: 0,
                ReceiveAccount:"",
                ProcFee:0,
                topBranch:"",
                ReceiveBranchCode:"",
                ReceiveBranchName:"",
                ItemType:5,
                ItemDetail:'额外费用',
                "createUserId": getCookie("userId"),
                "createBy": getCookie("userName"),
            },
            customerList:[],
            isEdit:true,
            topBranchList:[],
            RemainAmount:0,//账户预付款余额
            rules:{
                topBranch:[
                    {required: true, message: '请选择', trigger: 'change'}
                ],
                RealAmount: [
                    {required: true, type: 'number', message: '请填写实付金额', trigger: 'blur'}
                ],
                ReceiveAccount: [
                    {required: true, message: '请填写收款账户', trigger: 'change'}
                ],
                BranchCode: [
                    {required: true, message: '请选择支付方式', trigger: 'change'}
                ],
                type:[
                    {required: true, message: '请选择消费商', trigger: 'change'}
                ],
            }
        };
    },
    watch:{
    },
    mounted(){
        this.payDate = new Date()
        this.getPayWay()
    },
    methods: {
    //查找会员 下拉补全
        queryCus(queryString, cb) {
            this.customerList = []
            this.ruleForm.BranchCode = ""
            if (queryString !== '' && queryString != undefined) {
                this.getBranchByKeywords({ 'keywords': queryString.removeSP() })
            }

            let _this = this
            clearTimeout(this.timeout);
            this.timeout = setTimeout(() => {
                cb(_this.customerList);
            }, 1000);
        },
        selectCus(item) {
            this.ruleForm.BranchCode = item.code? item.code:""
        },

            //            搜索代理
            async getBranchByKeywords(params){
                try {
                    let res = await GetBranchByKeywords(params)
                    if (res instanceof Array && res.length > 0) {
                    for (let item of res) {
                         let tagName = ""
                        if(item["BranchTags"] != ''&&item["BranchTags"] != null&&item["BranchTags"] != undefined){
                            tagName = '('+item["BranchTags"]+')'
                        }
                        this.customerList.push({
                            value: item["BranchName"]+tagName,
                            phone: item["PhoneNumber"],
                            code: item["Code"],
                            name: item["BranchName"]+tagName,
                            hospitalCode: item['HospitalCode'],
                            hospitalName: item['HospitalName'],
                        })
                    }
                }
                    this.loading1 = false
                } catch (err) {
                    console.log(err)
                }
            },


        dateChange(val){
            this.ruleForm.payDate = val
        },

        async GetBaseBranchAccount(params){
            let res = await GetBaseBranchAccount(params)
            this.accountList = res.data
        },
        async GetHospitalAccountByCode(id) {
            let res = await GetHospitalAccountByCode({
                hospitalCode: id
            });
            this.hosAccount = res.data
            this.accountList = res.data;
        },
          paySelect(){
                this.ruleForm.PayTypeName = this.ruleForm.type.split("|")[0]
                this.ruleForm.PayType = this.ruleForm.type.split("|")[1]
            },
            selBranch(){
                
                if(this.ruleForm.topBranch.length>0){
                    this.ruleForm.ReceiveBranchCode = this.ruleForm.topBranch.split("|")[1]
                    this.ruleForm.ReceiveBranchName = this.ruleForm.topBranch.split("|")[0]
                    // if(this.isHos){
                    //     // 平台账户默认为杭州账户
                    //     this.GetHospitalAccountByCode(this.ruleForm.ReceiveBranchCode)
                    // }else{
                        // 获取销售公司账户
                    this.GetBaseBranchAccount({
                        keywords:this.ruleForm.ReceiveBranchCode //this.ruleForm.ReceiveBranchCode
                    })
                    // }
                }else{
                    this.ruleForm.ReceiveBranchCode = ""
                    this.ruleForm.ReceiveBranchName = ""
                }
            },
        //获取支付方式
        async getPayWay() {
            let mes = await GetUserAccountByCode({branchcode:this.code})
            this.RemainAmount = mes.RemainAmount
            let res0 = await GetDropDownPermission({typeId: this.isHos?"1":"2"})
            this.topBranchList = res0.data
            if(res0.data[0].code == ""){
                this.topBranchList.splice(0,1)
            }
            let res = await getBaseDataByCode("0006")
            if(res.constructor==Array){
                res.forEach(row => {
                    
                    if(row.DataCode !='008'&&row.DataCode !='009'&&row.DataCode !='010'&&row.DataCode !='011'){
                        this.payWayList.push({
                            name:row.DataName,
                            value:row.DataCode
                        })
                    }
                });
            }
           
        },
        submitForm(formName) {
            let _this = this
            this.$refs[formName].validate((valid) => {
                if (valid) {
                    if(this.payDate.formatDate("yyyy-MM-dd")==new Date().formatDate("yyyy-MM-dd")){
                        _this.ruleForm.PayDate = new Date().formatDate("yyyy-MM-dd hh:mm:ss")
                    }else{
                        _this.ruleForm.PayDate = this.payDate.formatDate("yyyy-MM-dd hh:mm:ss")
                    }
                    this.AddBranchOrderPay(_this.ruleForm)
                }
            });
        },
        init(formName){
            this.$refs[formName].resetFields();
            this.ruleForm.BranchCode = ""
            this.ruleForm.RealAmount = 0
            this.ruleForm.ProcFee = 0
            this.ruleForm.Memo = ""
            this.ruleForm.type = ""
            this.accountList = [],
            this.payDate = new Date()
        },
        resetForm(formName) {
           this.$refs[formName].resetFields();
           
           this.payDate = new Date()
        //    this.init(formName)
        },
        async AddBranchOrderPay(params){
            let res = await AddBranchOrderPay(params)
            if(res.status){
                    this.$message({ type: 'success', message: '添加成功' })
                    this.resetForm('ruleForm')
                }else{
                    this.$message({ type: 'warning', message: '添加失败!'+res.errorMessage })
                }
        }
    }
}
</script>

<style scoped>

.form_footer{
    text-align: center
}
.form_item_ipt153{
    width: 153px
}
.form_item_wt255{
    width: 253px
}

</style>

