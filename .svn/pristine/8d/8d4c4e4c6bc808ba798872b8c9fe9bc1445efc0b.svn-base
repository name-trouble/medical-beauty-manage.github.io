<template>
    <div class="menu_item" style="">
        <template v-for="(item,index) in data">
            <template v-if="!item.childs">
                <el-menu-item :index="item.index" @click='select(item)'>
                    <i :class="'icon iconfont icon-' + item.icon" style="vertical-align: middle"></i>
                    <span v-html="item.text" :style="{color:styles.color}" style="vertical-align: middle"></span>
                </el-menu-item>
            </template>
            <template v-else>
                  <el-submenu :index="item.index" >
                    <template slot="title">
                        <i :class="'icon iconfont icon-' + item.icon" style="vertical-align: middle"></i>
                        <span v-html="item.text"></span>
                    </template>
                    <treeitem :data="item.childs" :styles="{color:'#96a2b5 '}" :selectitem="select">
                    </treeitem>
                </el-submenu>
            </template>
        </template>
    </div>
</template>
<script type="text/ecmascript-6">
import {tabsLen} from "@/config/common"
import { getCookie,setCookie,setSStore,getSStore } from '@/config/mUtils'
export default {
    name: "treeitem",
    mounted() {
        if (this.data && this.data.length > 0) {
            this.isShow = true
        }
    },
    data() {
        return {
            index: '',
            isShow: false,
            cMenu:[],
        }
    },
    props: {
        data: Array,
        selectitem: Function,
        styles: {},
        selectMes:{
            type:Object
        }
    },
   
    computed: {
        pages() {
            return this.$store.state.SavePages
        },
        
    },
    methods: {
        getMenu(){
            if(getSStore('tabs')){
               this.cMenu = JSON.parse(getSStore('tabs'))
            }else{
                return []
            }
        },
        select(item) {
            this.getMenu()
            this.selectitem && this.selectitem(item)
            this.index = item.code
            if (this.cMenu.length === 0) {
                this.cMenu.push(item)
            } else {
                for (let i = 0; i < this.cMenu.length; i++) {
                    if (this.cMenu[i].text === item.text) { break }
                    else {
                        if (i >= this.cMenu.length - 1) {
                            this.cMenu.push(item)
                        }
                    }
                }
            }
            // 控制选项卡显示的个数 tabsLen为个数（可直接修改）
            if (this.cMenu.length >= tabsLen) {
                this.cMenu.splice(0, 1);
            }
            setSStore('index', ''+this.index)
            let arr = []
            this.cMenu.forEach(row=>{
                arr.push({
                    code: row.code,
                    index: row.index,
                    parentCode: row.parentCode,
                    text: row.text,
                })
            })
            setSStore('tabs',JSON.stringify(arr))
            this.$emit('cookieChange',item)
            setSStore('lastPage', item)
        },
    }
}
</script>

<style scoped>
/*  导入所需要的文字图标样式**/
</style>
