<template>
    <div class="addServant" >

        <el-form :model="formData" ref="addForm" label-width="110px" class="demo-formData">
            <el-form-item label="服务者编号："  class='form_item_mt10' prop="code" :rules="[ { required: true, message: '不能为空！', trigger: 'blur' }]">
                <el-input v-model="formData.code" disabled style="width: 400px;"></el-input>
            </el-form-item>
            <el-form-item label="服务者姓名：" class='form_item_mt10' prop="serviceName" :rules="[ { required: true, message: '不能为空！', trigger: 'blur' }]">
                <el-input v-model="formData.serviceName" style="width: 400px;"></el-input>
            </el-form-item>

            <el-form-item label="医院名称：" class='form_item_mt10' prop="hospitalCode" :rules="[ { required: true, message: '不能为空！', trigger: 'change' }]">
                <el-select v-model="formData.hospitalCode" placeholder="请选择" style="width: 400px;" @change="hosSelect">
                    <el-option v-for="(item,$index) in hospitals" :key="$index" value-key="Id" :label="item.SupplierName" :value="item.Code"></el-option>
                </el-select>
            </el-form-item>

            <el-form-item label="职位：" class='form_item_mt10' prop="serTypeCode" :rules="[ { required: true, message: '不能为空！', trigger: 'change' }]">
                <el-select v-model="formData.serTypeCode" placeholder="请选择" style="width: 400px;" name="test">
                    <el-option v-for="(item,$index) in serTypes" :key="$index" value-key="Id" :label="item.DataName" :value="item.DataCode"></el-option>
                </el-select>
            </el-form-item>

            <el-form-item label="职称：" class='form_item_mt10' prop="title">
                <el-select v-model="formData.title" placeholder="请选择" style="width: 400px;">
                    <el-option v-for="(item,$index) in jobs" :key="$index" value-key="Id" :label="item.DataName" :value="item.DataCode"></el-option>
                </el-select>
            </el-form-item>

            <el-form-item label="头衔：" class='form_item_mt10' >
                <el-input v-model="formData.JobTitle" style="width: 400px;"></el-input>
            </el-form-item>

            <el-form-item label="职务：" class='form_item_mt10' prop="jobs">
                <el-tag :key="tag" v-for="tag in positionTags" class="tag" :title="tag" :closable="true" type='primary' :close-transition="false" @close="handleCloseA(tag)">
                    <span class="tag-mes">
                        {{tag}}
                    </span>
                </el-tag>
                <el-input style="width:100px;" class="input-new-tag form_item_mt10" v-if="inputPostion" v-model="positionValue" ref="positionTags" size="small" @keyup.enter.native="handleInputConfirmA" @blur="handleInputConfirmA">
                </el-input>
                <el-button v-else class="button-new-tag" icon="plus" size="small" type="success" @click="showInputA"> 点击添加</el-button>
            </el-form-item>

            <el-form-item label="擅长：" prop="skillCode" class='form_item_mt10'>
                <el-tag :key="tag" v-for="tag in skillTags" :title="tag"  class="tag" :closable="true" type='primary' :close-transition="false" @close="handleCloseB(tag)">
                    <span class="tag-mes">
                        {{tag}}
                    </span>
                </el-tag>
                <el-input style="width:150px;" class="input-new-tag" v-if="inputSkill" v-model="skillValue" ref="skillTags" size="small" @keyup.enter.native="handleInputConfirmB" @blur="handleInputConfirmB">
                </el-input>
                <el-button v-else class="button-new-tag" icon="plus" size="small" type="success" @click="showInputB"> 点击添加</el-button>
            </el-form-item>

            <el-form-item label="上级：" v-if="formData.serTypeCode =='004'" class='form_item_mt10'>
                <el-select v-model="formData.ParentCode" filterable>
                    <el-option v-for="(item,index) in serverList" :key="index" :label="item.text" :value="item.code"></el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="级别：" class='form_item_mt10'>
                <!-- abcd ServiceLevel -->
                 <el-select v-model="formData.ServiceLevel">
                    <el-option label="A" value="A"></el-option>
                    <el-option label="B" value="B"></el-option>
                    <el-option label="C" value="C"></el-option>
                </el-select>
            </el-form-item>


            <el-form-item label="国家/地区：" prop="country" :rules="[ { required: true, message: '不能为空！', trigger: 'blur' }]" class='form_item_mt10'>
                <el-select v-model="formData.country" placeholder="请选择" style="width: 400px;">
                    <el-option v-for="(item,$index) in countryList" :key="$index" value-key="value" :label="item.name" :value="item.value"></el-option>
                </el-select>
            </el-form-item>

            <el-form-item label="服务费比例：" prop="farePercent" required class='form_item_mt10'>
                <el-input v-model="formData.farePercent" placeholder="0.00" style="width: 400px;">
                    <template slot="append">%</template>
                </el-input>
            </el-form-item>

            <el-form-item label="订金："  class='form_item_mt10'>
                <el-input v-model="formData.deposit" style="width: 400px;"></el-input>
            </el-form-item>

            <el-form-item label="详细介绍：" class='form_item_mt10' prop="richText" :show-message='true' style="width:600px" :rules="[ { required: true, message: '不能为空！', trigger: 'change' }]">
                <vue-editor height="200px" v-model="formData.richText" useCustomImageHandler @imageAdded="handleImageAdded"></vue-editor>

            </el-form-item>

            <el-form-item label="图片：" class='form_item_mt10' prop="imgUrl" :rules="[ { required: true, message: '不能为空！', trigger: 'change' }]">
                <el-upload class="avatar-uploader" :action="uploadUrl" :on-success="success" :accept="acceptImage" :show-file-list="false">
                    <img v-if="formData.imgUrl" :src="baseImgPath+formData.imgUrl" class="avatar">
                    <i v-else class="el-icon-plus avatar-uploader-icon"></i>
                </el-upload>
            </el-form-item>
            <el-form-item label="活动图：" class='form_item_mt10' :rules="[ { required: true, message: '不能为空！', trigger: 'change' }]">
                <el-upload class="avatar-uploader" :action="uploadUrl" :on-success="success1" :accept="acceptImage" :show-file-list="false">
                    <img v-if="formData.BannerImage" :src="baseImgPath+formData.BannerImage" class="avatar">
                    <i v-else class="el-icon-plus avatar-uploader-icon"></i>
                </el-upload>
            </el-form-item>
        </el-form>
        <div style="text-align: center">
            <el-button type="primary" @click="submit" :loading="saveLoading">保存</el-button>
            <el-button @click="reset">取消</el-button>
        </div>
    </div>
</template>

<script type="text/ecmascript-6">
import '../lib/supply.less'
import { xmxUrl, baseImgPath } from '@/config/env'
import { imgApi, acceptImage,countryList } from '@/config/common'
import { getCookie } from '@/config/mUtils'
import { VueEditor } from 'vue2-editor'
import axios from 'axios'
import '@/style/yqCom.less'
import "../lib/supply.less"

import { getSupplierBySupType, getBaseDataByCode, updateServiceMan,GetServiceManList,DelImg } from '@/api/myData'
export default {
    // name: "AddDoctor",
    props: {
        data: {
            type: Object,
            default: "",
        },
        onFinish: Function
    },
    components: { VueEditor },
    data() {
        return {
            saveLoading:false,
            serverList:[],
            formData: {
                id: "",
                code: "",
                deposit:"",
                JobTitle:"",
                BannerImage:"",
                serviceName: "",
                hospitalCode: "",
                serTypeCode: "",
                jobs: "",
                skillCode: "",
                title: "",
                farePercent: 0,
                country: "",
                imgUrl: "",
                richText: "",
                isEnabled: true,
                description: "",
                ServiceLevel:"",
                ParentCode:""
            },
            hospitals: [],
            serTypes: [],
            jobs: [],
            positionValue: "",
            skillValue: "",

            positionTags: [],
            inputPostion: false,

            skillTags: [],
            inputSkill: false,
            baseImgPath,
            acceptImage,
            countryList,
            uploadUrl: xmxUrl + imgApi + '?op=serviceman',
            richUrl: xmxUrl + imgApi + '?op=rich',
            allService:[],
            serverList:[]
        }
    },

    mounted() {
        this.formData.modifiedUserId = getCookie("userId")
        this.formData.modifiedBy = getCookie("userName")
        
        this.getServantType()
    },

    watch: {
        'data.Id': {
            handler(val, oldVal) {
                this.init()
            },
            deep: true
        },
        'formData.farePercent': {
            handler(newValue, oldValue) {
                let _this = this
                clearTimeout(this.timeOut)
                this.timeOut = setTimeout(function() {
                    let res = parseFloat(newValue.toString().replace(/[^\d.]/g, ""))
                    _this.formData.farePercent = res.toString() == 'NaN' ? '' : res + ""
                }, 300)
            },
            deep: true
        },
    },

    methods: {
        init() {
            for(var p in this.data){
                if(this.data[p] == null||this.data[p] == undefined){
                    this.data[p] =""
                }
            }

            this.formData.id = this.data.Id
            this.formData.code = this.data.Code
            this.formData.deposit = this.data.Deposit
            this.formData.JobTitle = this.data.JobTitle
            this.formData.BannerImage = this.data.BannerImage
            this.formData.serviceName = this.data.ServiceName
            this.formData.hospitalCode = this.data.HospitalCode  //{SupplierName:"ddd",Code:this.data.HospitalCode}//this.data.HospitalCode
            this.formData.serTypeCode = this.data.SerTypeCode
            this.formData.country = this.data.Country
            this.formData.title = this.data.Title
            this.formData. ServiceLevel = this.data.ServiceLevel
            this.formData.ParentCode= this.data.ParentCode
            this.formData.farePercent = this.data.FarePercent
            this.formData.imgUrl = this.data.ImgUrl
            this.formData.richText = this.data.RichText
            //this.formData.isEnabled = true
            //this.formData.description = ""
                
            this.positionTags = this.data.Jobs.length>0?this.data.Jobs.split(","):[]
            this.skillTags = this.data.SkillCode.length>0?this.data.SkillCode.split(","):[]
            this.formData.jobs = this.data.Jobs
            this.formData.skillCode = this.data.SkillCode
        },

        async getServantType() {
            this.serTypes = await getBaseDataByCode("0014")
            this.jobs = await getBaseDataByCode("0011")
            this.hospitals = await getSupplierBySupType("001")
            let ser = await GetServiceManList();
            this.allService = ser.data
            this.init()
        },

        //去除html
        removeHTMLTag(str) {
            str = str.replace(/<\/?[^>]*>/g, ''); //去除HTML tag
            str = str.replace(/[ | ]*\n/g, '\n'); //去除行尾空白
            //str = str.replace(/\n[\s| | ]*\r/g,'\n'); //去除多余空行
            str = str.replace(/ /ig, '');//去掉
            return str;
        },

        submit() {
            this.$refs['addForm'].validate((valid) => {
                if (this.removeHTMLTag(this.formData.richText) === '' && this.formData.richText.indexOf('<img') < 0) {
                    this.$message({ type: 'warning', message: '消息介绍不能为空!' })
                    // this.formData.richText = ""
                    return false
                }
                if (valid) this.update()
                else return false
            })
        },

        async update() {
           this.saveLoading = true
            let res = await updateServiceMan(this.formData)
            if (res.success && res.success > 0) {
                this.$message({ type: 'success', message: '保存成功!' })
                this.$emit("closeEdit")
            }
            else {
                this.$message({ type: 'warning', message: '保存失败!' })
            }
            this.saveLoading = false
        },

        reset() {
            this.$emit("closeEdit")
        },

        handleImageAdded(file, Editor, cursorLocation) {
            var formData = new FormData();
            formData.append('image', file)
            axios({
                url: this.richUrl, method: 'POST', headers: { 'Content-Type': 'multipart/form-data' }, data: formData
            }).then((result) => {
                let url = result.data
                Editor.insertEmbed(cursorLocation, 'image', baseImgPath + url);
            }).catch((err) => {
                console.log(err);
            })
        },


        //【职务】 tag
        handleCloseA(tag) {

            this.positionTags.splice(this.positionTags.indexOf(tag), 1);
            this.formData.jobs = this.positionTags.join(',')
        },

        showInputA() {
            this.inputPostion = true;
            this.$nextTick(_ => {
                this.$refs.positionTags.$refs.input.focus();
            });

        },
        handleInputConfirmA() {

            let inputValue = this.positionValue;
            if (inputValue) {
                this.positionTags.push(inputValue);
            }
            this.inputPostion = false;
            this.positionValue = '';
            this.formData.jobs = this.positionTags.join(',')
        },


        //【擅长技能】 tag
        handleCloseB(tag) {
            this.skillTags.splice(this.skillTags.indexOf(tag), 1);
            this.formData.skillCode = this.skillTags.join(',')
        },

        showInputB() {
            this.inputSkill = true;
            this.$nextTick(_ => {
                this.$refs.skillTags.$refs.input.focus();
            });
        },

        handleInputConfirmB() {
            let inputValue = this.skillValue;
            if (inputValue) {
                this.skillTags.push(inputValue);
            }
            this.inputSkill = false;
            this.skillValue = '';
            this.formData.skillCode = this.skillTags.join(',')
        },


        success(res, file) {
            if(this.formData.imgUrl!=''){
               this.DelImg(this.formData.imgUrl) 
            }
            this.formData.imgUrl = res
        },
        success1(res, file) {
            if(this.formData.BannerImage!=''){
               this.DelImg(this.formData.BannerImage) 
            }
            this.formData.BannerImage = res
        },

            // 删除原图片/视频
            async DelImg(filepath){
                let res = await DelImg({filepath:filepath})
                if(!res.status){
                    this.$message({message: '原图片删除失败！'+res.errorMessage,type: 'warning'});
                }
            },
        async hosSelect(){
            let arr = []
            for (let item of this.allService) {
                let hosCodes = item.hospitalCode.split(",")//多权限筛选
                if (hosCodes.indexOf(this.formData.hospitalCode)>=0&&item.serTypeCode == '004' ) {
                    arr.push({
                        code: item["code"],
                        name: item["serviceName"],
                        text: item["serviceName"] + "(" + item["code"] + ")"
                    });
                }
            }
            this.serverList = arr
        },
    }
}
</script>

<style scoped>
.avatar-uploader .el-upload {
    border: 1px dashed #d9d9d9;
    border-radius: 6px;
    cursor: pointer;
    position: relative;
    overflow: hidden;
}

.avatar-uploader .el-upload:hover {
    border-color: #20a0ff;
}

.avatar-uploader-icon {
    font-size: 28px;
    color: #8c939d;
    width: 146px;
    height: 146px;
    line-height: 146px;
    text-align: center;
    border: 1px dashed #c0ccda;
}

.avatar {
    width: 146px;
    height: 146px;
    display: block;
}
    .tag{
        position: relative;
        margin: 5px 5px 0 0;
        float: left;
        cursor: pointer;
        padding-right: 20px;
    }
    .tag-mes{
        display: block;
        max-width:160px;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
    }
</style>
